
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ASIGNACION BOOLEANO DECIMAL ENTERO EQ FCIENT GE GT ID LE LT NOTCIENT OCTAL SALTO SEPARADOR SIMBOLO VARTYPE VECTOR V_BOOLEANsentencias : statement SALTO sentencias\n        | statement statement : VARTYPE declarationstatement : VECTOR VARTYPE declarationstatement : VARTYPE ID '=' expressionSRstatement : ID '=' expressionSR\n                | ID '=' booleanstatement : expressionSR\n                    | booleanstatement : \nboolean : expressionLOGboolean :  expressionLOG BOOLEANO booleandeclaration : vector\n                        |  vector ',' declaration declaration : identificador\n                    |  identificador ',' declaration vector : ID '[' ENTERO ']' identificador : IDexpressionLOG : expressionSR LT expressionSR\n                        | expressionSR GT expressionSR\n                        | expressionSR LE expressionSR\n                        | expressionSR GE expressionSR\n                        | expressionSR EQ expressionSRexpressionSR : expressionSR '+' expressionMD\n                  | expressionSR '-' expressionMDexpressionSR : expressionMDexpressionMD : expressionMD '*' expression\n                  | expressionMD '/' expressionexpressionMD : expressionexpression : '(' expressionSR ')'expression : '-' expression\n                | '+' expression\n                expression : ENTERO\n                | DECIMAL\n                | V_BOOLEAN\n                | NOTCIENT\n                | OCTAL\n    expression : FCIENT '(' expressionSR ')'expression : ID "
    
_lr_action_items = {'VARTYPE':([0,4,20,],[3,25,3,]),'VECTOR':([0,20,],[4,4,]),'ID':([0,3,8,10,13,20,25,26,27,28,29,30,31,32,33,36,37,39,41,43,45,46,],[5,22,35,35,35,5,48,35,35,35,35,35,35,35,35,35,35,35,35,35,48,48,]),'SALTO':([0,2,5,6,7,9,11,12,14,15,16,17,18,20,21,22,23,24,34,35,38,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,64,66,67,68,69,],[-10,20,-39,-8,-9,-26,-11,-29,-33,-34,-35,-36,-37,-10,-3,-18,-13,-15,-32,-39,-31,-4,-18,-6,-7,-24,-25,-19,-20,-21,-22,-23,-27,-28,-12,-30,-5,-14,-16,-38,-17,]),'$end':([0,1,2,5,6,7,9,11,12,14,15,16,17,18,20,21,22,23,24,34,35,38,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,64,66,67,68,69,],[-10,0,-2,-39,-8,-9,-26,-11,-29,-33,-34,-35,-36,-37,-10,-3,-18,-13,-15,-32,-39,-31,-1,-4,-18,-6,-7,-24,-25,-19,-20,-21,-22,-23,-27,-28,-12,-30,-5,-14,-16,-38,-17,]),'(':([0,8,10,13,19,20,26,27,28,29,30,31,32,33,36,37,39,41,43,],[13,13,13,13,41,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'-':([0,5,6,8,9,10,12,13,14,15,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,49,51,52,53,54,55,56,57,58,59,61,62,63,64,68,],[10,-39,28,10,-26,10,-29,10,-33,-34,-35,-36,-37,10,10,10,10,10,10,10,10,10,-32,-39,10,10,-31,10,28,10,10,28,-24,-25,28,28,28,28,28,-27,-28,28,-30,28,28,-38,]),'+':([0,5,6,8,9,10,12,13,14,15,16,17,18,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,49,51,52,53,54,55,56,57,58,59,61,62,63,64,68,],[8,-39,27,8,-26,8,-29,8,-33,-34,-35,-36,-37,8,8,8,8,8,8,8,8,8,-32,-39,8,8,-31,8,27,8,8,27,-24,-25,27,27,27,27,27,-27,-28,27,-30,27,27,-38,]),'ENTERO':([0,8,10,13,20,26,27,28,29,30,31,32,33,36,37,39,41,43,44,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,65,]),'DECIMAL':([0,8,10,13,20,26,27,28,29,30,31,32,33,36,37,39,41,43,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'V_BOOLEAN':([0,8,10,13,20,26,27,28,29,30,31,32,33,36,37,39,41,43,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'NOTCIENT':([0,8,10,13,20,26,27,28,29,30,31,32,33,36,37,39,41,43,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'OCTAL':([0,8,10,13,20,26,27,28,29,30,31,32,33,36,37,39,41,43,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'FCIENT':([0,8,10,13,20,26,27,28,29,30,31,32,33,36,37,39,41,43,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'=':([5,22,],[26,43,]),'*':([5,9,12,14,15,16,17,18,34,35,38,51,52,58,59,62,68,],[-39,36,-29,-33,-34,-35,-36,-37,-32,-39,-31,36,36,-27,-28,-30,-38,]),'/':([5,9,12,14,15,16,17,18,34,35,38,51,52,58,59,62,68,],[-39,37,-29,-33,-34,-35,-36,-37,-32,-39,-31,37,37,-27,-28,-30,-38,]),'LT':([5,6,9,12,14,15,16,17,18,34,35,38,49,51,52,58,59,61,62,68,],[-39,29,-26,-29,-33,-34,-35,-36,-37,-32,-39,-31,29,-24,-25,-27,-28,29,-30,-38,]),'GT':([5,6,9,12,14,15,16,17,18,34,35,38,49,51,52,58,59,61,62,68,],[-39,30,-26,-29,-33,-34,-35,-36,-37,-32,-39,-31,30,-24,-25,-27,-28,30,-30,-38,]),'LE':([5,6,9,12,14,15,16,17,18,34,35,38,49,51,52,58,59,61,62,68,],[-39,31,-26,-29,-33,-34,-35,-36,-37,-32,-39,-31,31,-24,-25,-27,-28,31,-30,-38,]),'GE':([5,6,9,12,14,15,16,17,18,34,35,38,49,51,52,58,59,61,62,68,],[-39,32,-26,-29,-33,-34,-35,-36,-37,-32,-39,-31,32,-24,-25,-27,-28,32,-30,-38,]),'EQ':([5,6,9,12,14,15,16,17,18,34,35,38,49,51,52,58,59,61,62,68,],[-39,33,-26,-29,-33,-34,-35,-36,-37,-32,-39,-31,33,-24,-25,-27,-28,33,-30,-38,]),')':([9,12,14,15,16,17,18,34,35,38,40,51,52,58,59,62,63,68,],[-26,-29,-33,-34,-35,-36,-37,-32,-39,-31,62,-24,-25,-27,-28,-30,68,-38,]),'BOOLEANO':([9,11,12,14,15,16,17,18,34,35,38,51,52,53,54,55,56,57,58,59,62,68,],[-26,39,-29,-33,-34,-35,-36,-37,-32,-39,-31,-24,-25,-19,-20,-21,-22,-23,-27,-28,-30,-38,]),'[':([22,48,],[44,44,]),',':([22,23,24,48,69,],[-18,45,46,-18,-17,]),']':([65,],[69,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sentencias':([0,20,],[1,42,]),'statement':([0,20,],[2,2,]),'expressionSR':([0,13,20,26,29,30,31,32,33,39,41,43,],[6,40,6,49,53,54,55,56,57,61,63,64,]),'boolean':([0,20,26,39,],[7,7,50,60,]),'expressionMD':([0,13,20,26,27,28,29,30,31,32,33,39,41,43,],[9,9,9,9,51,52,9,9,9,9,9,9,9,9,]),'expressionLOG':([0,20,26,39,],[11,11,11,11,]),'expression':([0,8,10,13,20,26,27,28,29,30,31,32,33,36,37,39,41,43,],[12,34,38,12,12,12,12,12,12,12,12,12,12,58,59,12,12,12,]),'declaration':([3,25,45,46,],[21,47,66,67,]),'vector':([3,25,45,46,],[23,23,23,23,]),'identificador':([3,25,45,46,],[24,24,24,24,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sentencias","S'",1,None,None,None),
  ('sentencias -> statement SALTO sentencias','sentencias',3,'p_statement_sl_statement','calc.py',212),
  ('sentencias -> statement','sentencias',1,'p_statement_sl_statement','calc.py',213),
  ('statement -> VARTYPE declaration','statement',2,'p_statement_declaration','calc.py',216),
  ('statement -> VECTOR VARTYPE declaration','statement',3,'p_statement_vector','calc.py',259),
  ('statement -> VARTYPE ID = expressionSR','statement',4,'p_statement_dec_assign','calc.py',272),
  ('statement -> ID = expressionSR','statement',3,'p_statement_assign','calc.py',280),
  ('statement -> ID = boolean','statement',3,'p_statement_assign','calc.py',281),
  ('statement -> expressionSR','statement',1,'p_statement_expr','calc.py',291),
  ('statement -> boolean','statement',1,'p_statement_expr','calc.py',292),
  ('statement -> <empty>','statement',0,'p_statement_sl','calc.py',296),
  ('boolean -> expressionLOG','boolean',1,'p_boolean_single','calc.py',299),
  ('boolean -> expressionLOG BOOLEANO boolean','boolean',3,'p_statement_boolean','calc.py',303),
  ('declaration -> vector','declaration',1,'p_declaration_vectors','calc.py',323),
  ('declaration -> vector , declaration','declaration',3,'p_declaration_vectors','calc.py',324),
  ('declaration -> identificador','declaration',1,'p_declaracion_variables','calc.py',337),
  ('declaration -> identificador , declaration','declaration',3,'p_declaracion_variables','calc.py',338),
  ('vector -> ID [ ENTERO ]','vector',4,'p_vector','calc.py',350),
  ('identificador -> ID','identificador',1,'p_statement_declarationSimple','calc.py',356),
  ('expressionLOG -> expressionSR LT expressionSR','expressionLOG',3,'p_expressionLOG','calc.py',367),
  ('expressionLOG -> expressionSR GT expressionSR','expressionLOG',3,'p_expressionLOG','calc.py',368),
  ('expressionLOG -> expressionSR LE expressionSR','expressionLOG',3,'p_expressionLOG','calc.py',369),
  ('expressionLOG -> expressionSR GE expressionSR','expressionLOG',3,'p_expressionLOG','calc.py',370),
  ('expressionLOG -> expressionSR EQ expressionSR','expressionLOG',3,'p_expressionLOG','calc.py',371),
  ('expressionSR -> expressionSR + expressionMD','expressionSR',3,'p_expression_binop','calc.py',401),
  ('expressionSR -> expressionSR - expressionMD','expressionSR',3,'p_expression_binop','calc.py',402),
  ('expressionSR -> expressionMD','expressionSR',1,'p_expressionSR_expressionMD','calc.py',409),
  ('expressionMD -> expressionMD * expression','expressionMD',3,'p_expression_opmd','calc.py',414),
  ('expressionMD -> expressionMD / expression','expressionMD',3,'p_expression_opmd','calc.py',415),
  ('expressionMD -> expression','expressionMD',1,'p_expressionMD_expression','calc.py',422),
  ('expression -> ( expressionSR )','expression',3,'p_expression_group','calc.py',428),
  ('expression -> - expression','expression',2,'p_expression_signo','calc.py',433),
  ('expression -> + expression','expression',2,'p_expression_signo','calc.py',434),
  ('expression -> ENTERO','expression',1,'p_expression_basica','calc.py',443),
  ('expression -> DECIMAL','expression',1,'p_expression_basica','calc.py',444),
  ('expression -> V_BOOLEAN','expression',1,'p_expression_basica','calc.py',445),
  ('expression -> NOTCIENT','expression',1,'p_expression_basica','calc.py',446),
  ('expression -> OCTAL','expression',1,'p_expression_basica','calc.py',447),
  ('expression -> FCIENT ( expressionSR )','expression',4,'p_expression_fcient','calc.py',452),
  ('expression -> ID','expression',1,'p_expression_name','calc.py',464),
]
