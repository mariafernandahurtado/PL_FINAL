
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DECIMAL ENTERO FCIENT HEXADECIMAL NAME NOTCIENT OCTAL SALTOsentencias : statement SALTO sentencias\n        | statementstatement : NAME ENTERO "=" expressionSRstatement : expressionSRstatement : \nexpressionSR : expressionSR \'+\' expressionMD\n                  | expressionSR \'-\' expressionMDexpressionSR : expressionMDexpressionMD : expressionMD \'*\' expression\n                  | expressionMD \'/\' expressionexpressionMD : expressionexpression : \'(\' expressionSR \')\'expression : \'-\' expression\n                | \'+\' expression\n                expression : ENTERO\n                | DECIMAL\n                | HEXADECIMAL\n                | NOTCIENT\n                | OCTAL\n    expression : FCIENT \'(\' expressionSR \')\'expression : NAME ENTERO'
    
_lr_action_items = {'NAME':([0,6,8,10,16,18,19,22,23,26,28,],[3,21,21,21,3,21,21,21,21,21,21,]),'SALTO':([0,2,4,5,7,9,11,12,13,14,16,17,20,24,29,30,31,32,33,34,36,37,],[-5,16,-15,-4,-8,-11,-16,-17,-18,-19,-5,-21,-14,-13,-6,-7,-21,-9,-10,-12,-3,-20,]),'$end':([0,1,2,4,5,7,9,11,12,13,14,16,17,20,24,27,29,30,31,32,33,34,36,37,],[-5,0,-2,-15,-4,-8,-11,-16,-17,-18,-19,-5,-21,-14,-13,-1,-6,-7,-21,-9,-10,-12,-3,-20,]),'(':([0,6,8,10,15,16,18,19,22,23,26,28,],[10,10,10,10,26,10,10,10,10,10,10,10,]),'-':([0,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,],[8,-15,19,8,-8,8,-11,8,-16,-17,-18,-19,8,-21,8,8,-14,8,8,-13,19,8,8,-6,-7,-21,-9,-10,-12,19,19,-20,]),'+':([0,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,],[6,-15,18,6,-8,6,-11,6,-16,-17,-18,-19,6,-21,6,6,-14,6,6,-13,18,6,6,-6,-7,-21,-9,-10,-12,18,18,-20,]),'ENTERO':([0,3,6,8,10,16,18,19,21,22,23,26,28,],[4,17,4,4,4,4,4,4,31,4,4,4,4,]),'DECIMAL':([0,6,8,10,16,18,19,22,23,26,28,],[11,11,11,11,11,11,11,11,11,11,11,]),'HEXADECIMAL':([0,6,8,10,16,18,19,22,23,26,28,],[12,12,12,12,12,12,12,12,12,12,12,]),'NOTCIENT':([0,6,8,10,16,18,19,22,23,26,28,],[13,13,13,13,13,13,13,13,13,13,13,]),'OCTAL':([0,6,8,10,16,18,19,22,23,26,28,],[14,14,14,14,14,14,14,14,14,14,14,]),'FCIENT':([0,6,8,10,16,18,19,22,23,26,28,],[15,15,15,15,15,15,15,15,15,15,15,]),'*':([4,7,9,11,12,13,14,17,20,24,29,30,31,32,33,34,37,],[-15,22,-11,-16,-17,-18,-19,-21,-14,-13,22,22,-21,-9,-10,-12,-20,]),'/':([4,7,9,11,12,13,14,17,20,24,29,30,31,32,33,34,37,],[-15,23,-11,-16,-17,-18,-19,-21,-14,-13,23,23,-21,-9,-10,-12,-20,]),')':([4,7,9,11,12,13,14,20,24,25,29,30,31,32,33,34,35,37,],[-15,-8,-11,-16,-17,-18,-19,-14,-13,34,-6,-7,-21,-9,-10,-12,37,-20,]),'=':([17,],[28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sentencias':([0,16,],[1,27,]),'statement':([0,16,],[2,2,]),'expressionSR':([0,10,16,26,28,],[5,25,5,35,36,]),'expressionMD':([0,10,16,18,19,26,28,],[7,7,7,29,30,7,7,]),'expression':([0,6,8,10,16,18,19,22,23,26,28,],[9,20,24,9,9,9,9,32,33,9,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sentencias","S'",1,None,None,None),
  ('sentencias -> statement SALTO sentencias','sentencias',3,'p_statement_sl_statement','calc.py',117),
  ('sentencias -> statement','sentencias',1,'p_statement_sl_statement','calc.py',118),
  ('statement -> NAME ENTERO = expressionSR','statement',4,'p_statement_assign','calc.py',121),
  ('statement -> expressionSR','statement',1,'p_statement_expr','calc.py',129),
  ('statement -> <empty>','statement',0,'p_statement_sl','calc.py',133),
  ('expressionSR -> expressionSR + expressionMD','expressionSR',3,'p_expression_binop','calc.py',136),
  ('expressionSR -> expressionSR - expressionMD','expressionSR',3,'p_expression_binop','calc.py',137),
  ('expressionSR -> expressionMD','expressionSR',1,'p_expressionSR_expressionMD','calc.py',144),
  ('expressionMD -> expressionMD * expression','expressionMD',3,'p_expression_opmd','calc.py',148),
  ('expressionMD -> expressionMD / expression','expressionMD',3,'p_expression_opmd','calc.py',149),
  ('expressionMD -> expression','expressionMD',1,'p_expressionMD_expression','calc.py',156),
  ('expression -> ( expressionSR )','expression',3,'p_expression_group','calc.py',161),
  ('expression -> - expression','expression',2,'p_expression_signo','calc.py',166),
  ('expression -> + expression','expression',2,'p_expression_signo','calc.py',167),
  ('expression -> ENTERO','expression',1,'p_expression_basica','calc.py',176),
  ('expression -> DECIMAL','expression',1,'p_expression_basica','calc.py',177),
  ('expression -> HEXADECIMAL','expression',1,'p_expression_basica','calc.py',178),
  ('expression -> NOTCIENT','expression',1,'p_expression_basica','calc.py',179),
  ('expression -> OCTAL','expression',1,'p_expression_basica','calc.py',180),
  ('expression -> FCIENT ( expressionSR )','expression',4,'p_expression_fcient','calc.py',185),
  ('expression -> NAME ENTERO','expression',2,'p_expression_name','calc.py',197),
]
